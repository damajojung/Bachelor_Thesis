
library(brms)
library(rstan)
library(raw)
library(ChainLadder)
library(nlmeODE)
library(nlme)
library(R2OpenBUGS)


# Current state 15.04

############################################## 
### DATA
##############################################


# Apple
a=read.csv("/Users/dj/OneDrive - ZHAW/GoodNotes/6. Semester/BA/Data/wkcomp_pos.csv",header=TRUE)

# Windows
a=read.csv("C:/Users/David/OneDrive - ZHAW (1)/GoodNotes/6. Semester/BA/Data/wkcomp_pos.csv",header=TRUE)

grp.code=unique(a$GRCODE)

# function to get Schedule P triangle data given ins group
ins.line.data=function(g.code){
  b=subset(a,a$GRCODE==g.code)
  name=b$GRNAME
  grpcode=b$GRCODE
  ay=b$AccidentYear
  dev=b$DevelopmentLag
  
  cum_incloss=b[,6]
  cum_pdloss=b[,7]
  bulk_loss=b[,8]
  dir_premium=b[,9]
  ced_premium=b[,10]
  net_premium=b[,11]
  single=b[,12]
  posted_reserve97=b[,13]
  
  # get incremental paid losses - assume data is sorted by ay and dev
  inc_pdloss=numeric(0)
  for (i in unique(ay)){
    s=(ay==i)
    pl=c(0,cum_pdloss[s])
    ndev=length(pl)-1
    il=rep(0,ndev)
    for (j in 1:ndev){
      il[j]=pl[j+1]-pl[j]
    }
    inc_pdloss=c(inc_pdloss,il)
  }
  data.out=data.frame(name,grpcode,ay,dev,net_premium,dir_premium,ced_premium,
                      cum_pdloss,cum_incloss,bulk_loss,inc_pdloss,single,posted_reserve97)
  return(data.out)
}

# Example
comauto=ins.line.data(grp.code[2])

# upper triangle
com.insample=subset(comauto,ay+dev<=1998)

# lower triangle
com.outsample=subset(comauto,ay+dev>1998)

# --------- cumulative paid claims triangle
wk_tri2 <- as.triangle(com.insample, origin = "ay",
                       dev = "dev",
                       value = "cum_pdloss")

# ---- outstanding claims triangle 
com.insample$out_claims <- com.insample$cum_incloss - com.insample$cum_pdloss


wk_tri1 <- as.triangle(com.insample, origin = "ay",
                       dev = "dev",
                       value = "out_claims")


#### ------ Preparation for predictions

# For munich CL
wk_tri3 <- as.triangle(com.insample, origin = "ay",
                       dev = "dev",
                       value = "cum_incloss")
wk_tri3

#lower triangle - actual claims 
Incurred2 <- as.triangle(com.outsample, origin = "ay",
                         dev = "dev",
                         value = "cum_pdloss")



# ---- outstanding claims triangle 
#compute outstanding claims
com.insample$out_claims <- com.insample$cum_incloss - com.insample$cum_pdloss
com.outsample$out_claims <- com.outsample$cum_incloss - com.outsample$cum_pdloss

# Go to Appendix D and initialise the GroupedDate object
wk_tri1 <- as.triangle(com.insample, origin = "ay",
                       dev = "dev",
                       value = "out_claims")
wk_tri1_new <- cbind(unique(Dose)[-2], wk_tri1)



#lower triangle - actual claims 
Incurred1 <- as.triangle(com.outsample, origin = "ay",
                         dev = "dev",
                         value = "out_claims") 

#### ------ End preparation for predictions

# ---------------------------- Appendix D
### replica manually 

#Cohort
c1 <- rep(1988, 22)
c2 <- rep(1989, 20)
c3 <- rep(1990, 18)
c4 <- rep(1991, 16)
c5 <- rep(1992, 14)
c6 <- rep(1993, 12)
c7 <- rep(1994, 10)
c8 <- rep(1995, 8)
c9 <- rep(1996, 6)
c10 <- rep(1997, 4)

Cohort <- c(c1, c2, c3, c4, c5, c6, c7, c8, c9, c10)

#t
t1 <- c(0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10)
t2 <- c(0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9)
t3 <- c(0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8)
t4 <- c(0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7)
t5 <- c(0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6)
t6 <- c(0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5)
t7 <- c(0, 0, 1, 1, 2, 2, 3, 3, 4, 4)
t8 <- c(0, 0, 1, 1, 2, 2, 3, 3)
t9 <- c(0, 0, 1, 1, 2, 2)
t10 <- c(0, 0, 1, 1)
t <- c(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10)

#Claims

cl1 <- c(0, 0, rbind(wk_tri1[1 ,], wk_tri2[1 ,]))
cl2 <- c(0, 0, rbind(wk_tri1[2 ,], wk_tri2[2 ,]))
cl3 <- c(0, 0, rbind(wk_tri1[3 ,], wk_tri2[3 ,]))
cl4 <- c(0, 0, rbind(wk_tri1[4 ,], wk_tri2[4 ,]))
cl5 <- c(0, 0, rbind(wk_tri1[5 ,], wk_tri2[5 ,]))
cl6 <- c(0, 0, rbind(wk_tri1[6 ,], wk_tri2[6 ,]))
cl7 <- c(0, 0, rbind(wk_tri1[7 ,], wk_tri2[7 ,]))
cl8 <- c(0, 0, rbind(wk_tri1[8 ,], wk_tri2[8 ,]))
cl9 <- c(0, 0, rbind(wk_tri1[9 ,], wk_tri2[9 ,]))
cl10 <- c(0, 0, rbind(wk_tri1[10 ,], wk_tri2[10 ,]))

Claims <- c(cl1, cl2, cl3, cl4, cl5, cl6, cl7, cl8, cl9, cl10)
Claims <- Claims[!is.na(Claims)]
Claims <- na.omit(Claims)

#Type
Type <- as.factor(rep(c(1, 2), 65))

#Dose
dunique <- unique(comauto$dir_premium)

d1 <- c(dunique[1], rep(0, 21))
d2 <- c(dunique[2], rep(0, 19))
d3 <- c(dunique[3], rep(0, 17))
d4 <- c(dunique[4], rep(0, 15))
d5 <- c(dunique[5], rep(0, 13))
d6 <- c(dunique[6], rep(0, 11))
d7 <- c(dunique[7], rep(0, 9))
d8 <- c(dunique[8], rep(0, 7))
d9 <- c(dunique[9], rep(0, 5))
d10 <- c(dunique[10], rep(0, 3))

Dose <- c(d1, d2, d3, d4, d5, d6, d7, d8, d9, d10)

#Cmt
Cmt <- as.factor(rep(1, 130))


Data <- cbind(Cohort, t, Claims, Type, Dose, Cmt);Data
Data <- as.data.frame(Data)
Data <- groupedData(Claims ~t | Cohort/Type, data = Data)

######
# Data_Full
###### 

# Needed for predictions

#Cohort
c1 <- rep(1988, 22)
c2 <- rep(1989, 22)
c3 <- rep(1990, 22)
c4 <- rep(1991, 22)
c5 <- rep(1992, 22)
c6 <- rep(1993, 22)
c7 <- rep(1994, 22)
c8 <- rep(1995, 22)
c9 <- rep(1996, 22)
c10 <- rep(1997, 22)

Cohort <- c(c1, c2, c3, c4, c5, c6, c7, c8, c9, c10)

#t
t1 <- c(0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10)
t2 <- c(0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10)
t3 <- c(0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10)
t4 <- c(0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10)
t5 <- c(0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10)
t6 <- c(0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10)
t7 <- c(0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10)
t8 <- c(0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10)
t9 <- c(0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10)
t10 <- c(0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10)
t <- c(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10)

#Claims

cl1 <- c(0, 0, rbind(data_in_full_2[1 ,], data_in_full[1 ,]))
cl2 <- c(0, 0, rbind(data_in_full_2[2 ,], data_in_full[2 ,]))
cl3 <- c(0, 0, rbind(data_in_full_2[3 ,], data_in_full[3 ,]))
cl4 <- c(0, 0, rbind(data_in_full_2[4 ,], data_in_full[4 ,]))
cl5 <- c(0, 0, rbind(data_in_full_2[5 ,], data_in_full[5 ,]))
cl6 <- c(0, 0, rbind(data_in_full_2[6 ,], data_in_full[6 ,]))
cl7 <- c(0, 0, rbind(data_in_full_2[7 ,], data_in_full[7 ,]))
cl8 <- c(0, 0, rbind(data_in_full_2[8 ,], data_in_full[8 ,]))
cl9 <- c(0, 0, rbind(data_in_full_2[9 ,], data_in_full[9 ,]))
cl10 <- c(0, 0, rbind(data_in_full_2[10 ,], data_in_full[10 ,]))

Claims <- c(cl1, cl2, cl3, cl4, cl5, cl6, cl7, cl8, cl9, cl10)
Claims <- Claims[!is.na(Claims)]
Claims <- na.omit(Claims)

#Type
Type <- as.factor(rep(c(1, 2), 65))

#Dose
dunique <- unique(comauto$dir_premium)

d1 <- c(dunique[1], rep(0, 21))
d2 <- c(dunique[2], rep(0, 21))
d3 <- c(dunique[3], rep(0, 21))
d4 <- c(dunique[4], rep(0, 21))
d5 <- c(dunique[5], rep(0, 21))
d6 <- c(dunique[6], rep(0, 21))
d7 <- c(dunique[7], rep(0, 21))
d8 <- c(dunique[8], rep(0, 21))
d9 <- c(dunique[9], rep(0, 21))
d10 <- c(dunique[10], rep(0, 21))

Dose <- c(d1, d2, d3, d4, d5, d6, d7, d8, d9, d10)

#Cmt
Cmt <- as.factor(rep(1, 130))


Data_Full <- cbind(Cohort, t, Claims, Type, Dose, Cmt);Data_Full
Data_Full <- as.data.frame(Data_Full)
Data_Full <- groupedData(Claims ~t | Cohort/Type, data = Data_Full)

# End Data_Full

# ---------------------------------------------------------------- End Data Preparation


############################################## 
### FUNCTIONS
##############################################


freq_model <- function(base_mod, time_dep, rand_eff_corr, block_diag_rand_eff, Data, plot){
  
  if(base_mod == T){
    
    # BASELINE STRUCTURAL MODEL
    DEmodel <- list( 
      DiffEq=list(
        dy1dt = ~ -lker*y1,
        dy2dt = ~ lker*lRLR*y1 - lkp*y2,
        dy3dt = ~ lkp*lRRF*y2),
      ObsEq=list(
        EX = ~ 0,
        OS = ~ y2,
        PA = ~ y3),
      States=c("y1","y2","y3"),
      Parms=c("lker","lRLR","lkp","lRRF"),
      Init=list(0,0,0))
    
    
    ReservingModel <<- nlmeODE(DEmodel,Data) ### “Data” = data in Appendix D
    nlmeModel <<- nlme(Claims ~ ReservingModel(lker,lRLR,lkp,lRRF,t,Cohort,Type), # Parameters of DiffEq + right side of GroupedData
                       data = Data, # Grouped Data
                       fixed = lker+lRLR+lkp+lRRF ~ 1, ### fixed-effect parameters
                       random = pdDiag(lRLR + lRRF ~ 1), ### parameters with random-effects - should be ultimate loss ratio
                       groups = ~Cohort, ### data grouping (accident years)
                       weights = varIdent(form = ~1 | Type), ### residual error functions: OS&PD
                       start = c(lker = log(1.5), lRLR = log(1),
                                 lkp = log(0.75), lRRF = log(0.75)), ### parameter starting values
                       control=list(returnObject=TRUE,msVerbose=TRUE, msMaxIter=10000,pnlsMaxIter=10000,
                                    pnlsTol=0.4), ### tolerance for PNLS convergence
                       verbose=TRUE)
    if (plot == T){
      plot_func(x = nlmeModel)
    }
    
  }
  
  if(time_dep == T){
    
    DEmodel2 <- list(
      DiffEq=list(
        dy1dt = ~ -lBer*t*y1,
        dy2dt = ~ lBer*t*lRLR*y1 - lkp*y2,
        dy3dt = ~ lkp*lRRF*y2),
      ObsEq=list(
        EX = ~ 0,
        OS = ~ y2,
        PA = ~ y3),
      States=c("y1","y2","y3"),
      Parms=c("lBer","lRLR","lkp","lRRF"),
      Init=list(0,0,0)) 
    
    ReservingModel2 <<- nlmeODE(DEmodel2,Data)
    
    nlmeModel2 <<- nlme(Claims ~ ReservingModel2(lBer,lRLR,lkp,lRRF,t,Cohort,Type),
                        data = Data,
                        fixed = lBer+lRLR+lkp+lRRF ~ 1,
                        random = pdDiag(lRLR + lRRF ~ 1),
                        groups = ~Cohort,
                        weights = varIdent(form = ~1 | Type),
                        start=c(lBer = log(5), lRLR = log(1.03),
                                lkp = log(0.45), lRRF = log(0.67)),
                        control=list(returnObject=TRUE,msVerbose=TRUE,
                                     msMaxIter=10000,pnlsMaxIter=10000,
                                     pnlsTol=0.4),
                        verbose=TRUE)
    
    if (plot == T){
      plot_func(x = nlmeModel2)
    }
  }
  
  if(rand_eff_corr == T){
    
    DEmodel3 <- list(
      DiffEq=list(
        dy1dt = ~ -lBer*t*y1,
        dy2dt = ~ lBer*t*lRLR*y1 - lkp*y2,
        dy3dt = ~ lkp*lRRF*y2),
      ObsEq=list(
        EX = ~ 0,
        OS = ~ y2,
        PA = ~ y3),
      States=c("y1","y2","y3"),
      Parms=c("lBer","lRLR","lkp","lRRF"),
      Init=list(0,0,0)) 
    
    ReservingModel3 <<- nlmeODE(DEmodel3,Data)
    
    nlmeModel3 <<- nlme(Claims ~ ReservingModel3(lBer,lRLR,lkp,lRRF,t,Cohort,Type),
                        data = Data,
                        fixed = lBer+lRLR+lkp+lRRF ~ 1,
                        random=list(lRLR+lRRF~1),
                        groups = ~Cohort,
                        weights = varIdent(form = ~1 | Type),
                        start=c(lBer = log(5), lRLR = log(1.03),
                                lkp = log(0.45), lRRF = log(0.67)),
                        control=list(returnObject=TRUE,msVerbose=TRUE,
                                     msMaxIter=10000,pnlsMaxIter=10000,
                                     pnlsTol=0.4),
                        verbose=TRUE)
    
    if (plot == T ){
      plot_func(x = nlmeModel3)
    }
  }
  
  if(block_diag_rand_eff == T){
    
    DEmodel4 <- list(
      DiffEq=list(
        dy1dt = ~ -lBer*t*y1,
        dy2dt = ~ lBer*t*lRLR*y1 - lkp*y2,
        dy3dt = ~ lkp*lRRF*y2),
      ObsEq=list(
        EX = ~ 0,
        OS = ~ y2,
        PA = ~ y3),
      States=c("y1","y2","y3"),
      Parms=c("lBer","lRLR","lkp","lRRF"),
      Init=list(0,0,0)) 
    
    ReservingModel4 <<- nlmeODE(DEmodel4,Data)
    
    nlmeModel4 <<- nlme(Claims ~ ReservingModel4(lBer,lRLR,lkp,lRRF,t,Cohort,Type),
                        data = Data,
                        fixed = lBer+lRLR+lkp+lRRF ~ 1,
                        random=pdBlocked(list(lRLR + lRRF~1, lkp ~ 1)),
                        groups = ~Cohort,
                        weights = varIdent(form = ~1 | Type),
                        start=c(lBer = log(5), lRLR = log(1.03),
                                lkp = log(0.45), lRRF = log(0.67)),
                        control=list(returnObject=TRUE,msVerbose=TRUE,
                                     msMaxIter=10000,pnlsMaxIter=10000,
                                     pnlsTol=0.4),
                        verbose=TRUE)
    if (plot == T){
      plot_func(x = nlmeModel4)
    }
  }
}


# ------------ Plot Function

plot_func <- function(x){
  model <- x
  data <- model$fitted[,2]
  wk_tri1 <- cbind(rep(0, nrow(wk_tri1)), wk_tri1)
  wk_tri2 <- cbind(rep(0, nrow(wk_tri2)), wk_tri2)
  time <- seq(from = 1988, to = 1997, by = 1)
  a <- which(model$fitted == 0)
  b <- seq(from = 1, to = length(a), by = 2)
  c <- a[b]
  
  matrix_fixed <- matrix(NA, ncol=10, nrow = 11) # outstanding
  matrix_cohort <- matrix(NA, ncol=10, nrow = 11) # paid
  
  for(i in 1:length(time)){
    s <- seq(from = c[i], to = c[i+1]-1, by = 1)
    odd <- seq(from = min(s), to =max(s), by = 2)
    even <- seq(from = (min(s)+1),to = max(s), by = 2)
    matrix_fixed[1:length(odd),i] <- data[odd]
    matrix_cohort[1:length(even),i] <- data[even]
  }
  
  data_I <- matrix_fixed + matrix_cohort
  
  # Start Prediction
  IndCoef <- coef(model)
  p <- ReservingModel(rep(IndCoef[,1], each = 2*11),
                      rep(IndCoef[,2], each = 2*11),
                      rep(IndCoef[,3], each = 2*11),
                      rep(IndCoef[,4], each = 2*11),
                      Data_Full$t, Data_Full$Cohort, Data_Full$Type)
  
  title_time <- seq(from = 1988, to = 1997, by = 1)
  odd <- c(1,3,5,7,9,11,13,15,17,19,21)
  even <- c(2,4,6,8,10,12,14,16,18,20,22)
  pred_data_out = matrix(NA, nrow = 11, ncol = 10) # odd
  pred_data_paid = matrix(NA, nrow = 11, ncol = 10)# even
  
  iteration = 10
  l = 22
  
  for (i in 1:iteration){ # fill data into columns
    aim = i * l
    start = (aim - l) + 1
    dat_together = p[start:aim]
    dat_odd = dat_together[odd]
    dat_even = dat_together[even]
    pred_data_out[,i] = dat_odd
    pred_data_paid[,i] = dat_even
  }
  
  pred_data_out = as.data.frame(pred_data_out) 
  pred_data_paid = as.data.frame(pred_data_paid)
  colnames(pred_data_out) = title_time
  colnames(pred_data_paid) = title_time
  
  pred_data_inc = pred_data_out + pred_data_paid
  
  # End Prediction
  
  # Outstanding and Paid together
  par(mfrow=c(2,5))
  for(i in 1:length(time)){
    plot(matrix_fixed[,i], type = "b", ylim = c(0,70000), ylab = "OS & PD", xlab = "Dev. Year", main = as.character(time[i]), cex.main = 3, cex.lab = 1.5, lwd = 3)
    lines(matrix_cohort[,i], col = "red", lwd = 3)
  }
  
  # Just outstanding
  for(i in 1:length(time)){
    plot(wk_tri1[i,], ylim = c(0,70000), type = "b",ylab = "OS", xlab = "Dev. Year", main = as.character(time[i]),  cex.main = 3, cex.lab = 1.5, lwd = 3) # out-claims
    lines(pred_data_out[i], col = "blue", lwd = 2)
  }
  
  # Just paid
  for(i in 1:length(time)){
    plot(wk_tri2[i,], ylim = c(0,70000), type = "b",ylab = "PD", xlab = "Dev. Year", main = as.character(time[i]),  cex.main = 3, cex.lab = 1.5, lwd = 3) # cum.paid loss
    lines(pred_data_paid[i], col = "blue", lwd = 2)
  }
  
  # Incurred
  for(i in 1:length(time)){
    plot(data_I[,i], ylim = c(0,90000), type = "b", col = "black", ylab = "INC", xlab = "Dev. Year", main = as.character(time[i]),  cex.main = 3, cex.lab = 1.5, lwd = 3)
    lines(pred_data_inc[i], col = "blue", lwd = 2)
  }
  
  coefs <- nlmeModel$coefficients
  RLR <- exp(coefs$random$Cohort[,1])
  RRF <- exp(coefs$random$Cohort[,2])
  par(mfrow=c(1,2))
  plot(RLR, type = "b", col = "red", ylim = c(0,1.5), ylab="RLR and RRF estimates", xlab = "Accident Year", main = "RRF and RLR estimates",  cex.main = 1.5, cex.lab = 1.5, lwd = 3)
  lines(RRF, type = "b", col  = "blue", lwd = 3)
  
  premiums <- unique(Dose); premiums <- premiums[-2]
  plot(premiums, type = 'b', main = "Premium", ylab = "Premiums",  cex.main = 3, cex.lab = 1.5, lwd = 3)
  par(mfrow=c(1,1))
}


# End plot function


freq_model(base_mod = 1, time_dep = 0, rand_eff_corr=0, block_diag_rand_eff = 0, Data = Data, plot = 1)


############################################## 
### PREDICTIONS FOR TRIANGLES
##############################################

# ---- Predictions
#Actual incurred claims
IncurredTotal <- Incurred1 + Incurred2
IncurredTotal10 <- as.numeric(c(wk_tri1[1, 10] + wk_tri2[1, 10], IncurredTotal[, 9]))



#Classic mack CL
mack <- MackChainLadder(wk_tri1+wk_tri2, est.sigma="Mack")
mack10 <- as.numeric(mack$FullTriangle[, 9])



#Munich mack CL
MackMunich <- MunichChainLadder(wk_tri2, wk_tri3, # Paid # Incurred
                                est.sigmaP = "Mack", est.sigmaI = "Mack",
                                tailP=F, tailI=F)
MackMunich10 <- as.numeric(MackMunich$MCLIncurred[, 10])

cbind(unique(Cohort),IncurredTotal10, mack10, MackMunich10)

# ----- End Predictions

############################################## 
### OpenBUGS
##############################################

# ------------------------ SwissRe


model <- function() {
  for (i in 1:n.ind) {
    for (j in 1:1) {
      data_O[i, j] ~ dnorm(mean_O[i, j] , tau_O)
      data_P[i, j] ~ dnorm(mean_P[i, j] , tau_P)
      data_I[i, j] <- data_O[i, j] + data_P[i, j]
      mean_O[i, j] <- solution[i,j,2]
      mean_P[i, j] <- solution[i, j, 3]
      mean_I[i, j] <- mean_O[i, j] + mean_P[i, j]
    }
    for (j in 2:n.grid) {
      data_O[i, j] ~ dnorm(mean_O[i, j] , tau_O2)
      data_P[i, j] ~ dnorm(mean_P[i, j] , tau_P2)
      data_I[i, j] <- data_O[i, j] + data_P[i, j]
      mean_O[i, j] <- solution[i, j, 2] + rho2 * (data_O[i, j-1] - mean_O[i, j-1])
      #Calendar shock substitution
      #mean_O[i, j] <- solution[i,j,2] * (1 - C[i,j] * a[i]) + rho2 *(data_O[i, j-1] - #mean_O[i, j-1])
      mean_P[i, j] <- solution[i, j, 3] + rho3 * (data_P[i, j-1] - mean_P[i, j-1])
      mean_I[i, j] <- mean_O[i, j] + mean_P[i, j]
    }
    theta[i, 1:p] ~ dmnorm(mu[1:p], omega.inv[1:p, 1:p])
    param[i, 1] <- theta[i, 1]
    param[i, 2] <- theta[i, 2]
    param[i, 3] <- theta[i, 3]
    param[i, 4] <- theta[i, 4]
    param[i, p+1] <- prem[i]
    Ber[i] <- exp(theta[i, 1])
    RLR[i] <- exp(theta[i, 2])
    kp[i] <- exp(theta[i, 3])
    RRF[i] <- exp(theta[i, 4])
    ULR[i] <- RLR[i] * RRF[i]
    ILR10[i] <- data_I[i, 10] / prem[i]
    solution[i, 1:n.grid, 1:dim] <- ode(inits[i, 1:dim],
                                        grid[1:n.grid], D(A[i, 1:dim], t[i]), origin, tol)
    D(A[i, 1], t[i]) <- -Ber[i] * t[i] * A[i, 1]
    D(A[i, 2], t[i]) <- Ber[i] * t[i] * RLR[i] * A[i, 1] - kp[i] * A[i, 2]
    D(A[i, 3], t[i]) <- kp[i] * RRF[i] * A[i, 2]
    
    #Calendar shock substitution
    #D(A[i, 3], t[i]) <- kp[i] * RRF[i] * (1 - V[i]*a[i]) * A[i, 2]
    #V[i] <- step((i + t[i]) - 10)
    #a[i] ~ dunif(-0.99,0.99)
    
    inits[i, 1] <- prem[i] 
    inits[i, 2] <- 0 
    inits[i, 3] <- 0
  }
  mu[1:p] ~ dmnorm(mu.prior.mean[1:p], mu.prior.prec[1:p, 1:p])
  omega.inv[1:p, 1:p] ~ dwish(omega.inv.matrix[1:p, 1:p], omega.inv.dof)
  omega[1:p, 1:p] <- inverse(omega.inv[1:p, 1:p])
  ResC <- omega[2, 4] / (sqrt(omega[2, 2]) * sqrt(omega[4, 4]))
  sigma_O ~ dunif(0, 10000)
  tau_O <- pow(sigma_O, -2)
  sigma_O2 <- sigma_O * sqrt(1 - pow(rho2, 2))
  tau_O2 <- pow(sigma_O2, -2)
  sigma_P ~ dunif(0, 5000)
  tau_P <- pow(sigma_P, -2)
  sigma_P2 <- sigma_P * sqrt(1 - pow(rho3, 2))
  tau_P2 <- pow(sigma_P2, -2)
  rho2 ~ dunif(-1,1)
  rho3 ~ dunif(-1,1)
  #Standardized residuals
  for (i in 1:n.ind) {
    for (j in 1:1) {
      r_O[i,j] <- (data_O[i, j] - mean_O[i, j] ) * sqrt(tau_O)
      r_P[i,j] <- (data_P[i, j] - mean_P[i, j] ) * sqrt(tau_P)
    }
    for (j in 2:n.grid) {
      r_O[i,j] <- (data_O[i, j] - mean_O[i, j] ) * sqrt(tau_O2)
      r_P[i,j] <- (data_P[i, j] - mean_P[i, j] ) * sqrt(tau_P2)
    }
  }
}

# parameters <- c("theta", "mu","omega.inv", "sigma_O","sigma_P","rho2","rho3")
# write.model(model, con = "model.txt", digits = 5) initial model

model.file <- file.path(tempdir(), "model.txt") # new approach
write.model(model, model.file)


# Data and prior parameters

data <- list(
  p = 4, dim = 3,
  origin = 0.0,
  tol = 1.0E-6,
  n.ind = 10, n.grid = 10,
  grid = c(1,2,3,4,5,6,7,8,9,10),
  prem = c(104437, 88883, 85956, 99339, 104897, 119427, 110784, 77731, 63646, 48052),
  mu.prior.mean = c(1.7, -0.15, -0.9, -0.21),
  mu.prior.prec = structure(
    .Data = c(
      650, 0, 0, 0,
      0, 380, 0, 0,
      0, 0, 5400, 0,
      0, 0, 0, 390),
    .Dim = c(4, 4)),
  omega.inv.matrix = structure(
    .Data = c(
      1, 0, 0, 0,
      0, 1, 0, 0.8,
      0, 0, 1, 0,
      0, 0.8, 0, 1),
    .Dim = c(4, 4)),
  omega.inv.dof = 4,
  data_O = structure(.Data = c(
    53121, 41222, 32309, 24944, 17104, 13137, 9605, 6515, 1661, 1322,
    54145, 37188, 26976, 20015, 14319, 10179, 6672, 2575, 2071, NA,
    55211, 37221, 27760, 17990, 11417, 6716, 4282, 3015, NA, NA,
    60617, 42144, 25987, 14805, 9406, 5792, 3966, NA, NA, NA,
    65719, 46047, 31250, 22245, 11878, 8408, NA, NA, NA, NA,
    68133, 51102, 39934, 21824, 16955, NA, NA, NA, NA, NA,
    62434, 46661, 32248, 24140, NA, NA, NA, NA, NA, NA,
    56971, 48677, 35336, NA, NA, NA, NA, NA, NA, NA,
    56526, 41707, NA, NA, NA, NA, NA, NA, NA, NA,
    40799, NA, NA, NA, NA, NA, NA, NA, NA, NA),
    .Dim = c(10,10)),
  data_P = structure(.Data = c(
    9558, 22778, 33298, 40348, 45146, 48048, 49782, 50623, 51812, 51939,
    7913, 19472, 29622, 36816, 40975, 43302, 44707, 45871, 46229, NA,
    8744, 24302, 35406, 43412, 48057, 50897, 52879, 53956, NA, NA,
    13301, 32950, 47201, 56394, 61650, 65039, 66566, NA, NA, NA,
    11424, 29086, 42034, 50910, 56406, 59437, NA, NA, NA, NA,
    11792, 27161, 38229, 46722, 50742, NA, NA, NA, NA, NA,
    11194, 26893, 38488, 45580, NA, NA, NA, NA, NA, NA,
    12550, 31604, 44045, NA, NA, NA, NA, NA, NA, NA,
    13194, 31474, NA, NA, NA, NA, NA, NA, NA, NA,
    9372, NA, NA, NA, NA, NA, NA, NA, NA, NA),
    .Dim = c(10,10))
)

p <- data$p
dim <- data$dim
origin <- data$origin
tol <- data$tol
n.ind <- data$n.ind
n.grid <- data$n.grid
grid <- data$grid
prem <- data$prem
mu.prior.mean <-data$mu.prior.mean
mu.prior.prec <- data$mu.prior.prec
omega.inv.matrix <- data$omega.inv.matrix
omega.inv.dof <- data$omega.inv.dof
data_O <- data$data_O
data_P <- data$data_P


data <- list("p", "dim", "origin", "tol", "n.ind", "n.grid", "grid", "prem", "mu.prior.mean", "mu.prior.prec",
             "omega.inv.matrix", "omega.inv.dof", "data_O", "data_P")
length(data)

# bugs.data(data, dir = getwd(), digits = 5, data.file = "data.txt")


# Initial values (1)
 inits <- function(){
   list(
     rho2 = 0.5,
     rho3= 0.5,
     sigma_O = 5000,
     sigma_P = 500,
     mu = c(1.7, -0.15, -0.9, -0.21),
     omega.inv = structure(
       .Data = c(
         10, 0, 0, 0,
         0, 10, 0, 0.8,
         0, 0, 10, 0,
         0, 0.8, 0, 10),
       .Dim = c(4, 4)),
     theta = structure(
       .Data = c(
         1.7, -0.15, -0.9, -0.21,
         1.7, -0.15, -0.9, -0.21,
         1.7, -0.15, -0.9, -0.21,
         1.7, -0.15, -0.9, -0.21,
         1.7, -0.15, -0.9, -0.21,
         1.7, -0.15, -0.9, -0.21,
         1.7, -0.15, -0.9, -0.21,
         1.7, -0.15, -0.9, -0.21,
         1.7, -0.15, -0.9, -0.21,
         1.7, -0.15, -0.9, -0.21),
       .Dim = c(10, 4)))
 }
 
params = c("rho2", "rho3", "sigma_O", "sigma_P", "mu", "omega.inv", "theta")



out <- bugs(data, inits, params, model.file,n.chains = 3, n.iter=1000, debug = TRUE)


# BUGS installation path:    C:\Program Files (x86)\OpenBUGS\OpenBUGS323
# Regarding performance: JAGS could be helpful. 


# Initial values (2)
inits2 <- function(){
  list(
    rho2 = 0.6,
    rho3= 0.2,
    sigma_O = 3000,
    sigma_P = 700,
    mu = c(1.4, -0.07, -0.2, -0.51),
    omega.inv = structure(
      .Data = c(
        15, 0, 0, 0,
        0, 15, 0, 0.5,
        0, 0, 15, 0,
        0, 0.5, 0, 15),
      .Dim = c(4, 4)),
    theta = structure(
      .Data = c(
        1.4, -0.07, -0.2, -0.51,
        1.4, -0.07, -0.2, -0.51,
        1.4, -0.07, -0.2, -0.51,
        1.4, -0.07, -0.2, -0.51,
        1.4, -0.07, -0.2, -0.51,
        1.4, -0.07, -0.2, -0.51,
        1.4, -0.07, -0.2, -0.51,
        1.4, -0.07, -0.2, -0.51,
        1.4, -0.07, -0.2, -0.51,
        1.4, -0.07, -0.2, -0.51),
      .Dim = c(10, 4))
  )
}


# Initial values (3)
inits3 <- function(){
  list(
    rho2 = 0.2,
    rho3= 0.6,
    sigma_O = 1500,
    sigma_P = 1000,
    mu = c(1.1, 0, 0, -0.29),
    omega.inv = structure(
      .Data = c(
        5, 0, 0, 0,
        0, 5, 0, 0.3,
        0, 0, 5, 0,
        0, 0.3, 0, 5),
      .Dim = c(4, 4)),
    theta = structure(
      .Data = c(
        1.1, 0, 0, -0.29,
        1.1, 0, 0, -0.29,
        1.1, 0, 0, -0.29,
        1.1, 0, 0, -0.29,
        1.1, 0, 0, -0.29,
        1.1, 0, 0, -0.29,
        1.1, 0, 0, -0.29,
        1.1, 0, 0, -0.29,
        1.1, 0, 0, -0.29,
        1.1, 0, 0, -0.29),
      .Dim = c(10, 4))
  )
}


